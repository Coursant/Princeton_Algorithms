1. Nonrecursive depth-first search. Implement depth-first search in an undirected graph without using recursion.

Solution:
Any recursion algorithm constructs a stack to remember where to return. 
Implement the stack version of the recursive depth-first search algorithm. 
(See DFS.h)

2. Diameter and center of a tree. Given a connected graph with no cycles:

	- Diameter: design a linear-time algorithm to find the longest simple path in the graph.
	
	- Center: design a linear-time algorithm to find a vertex such that its maximum distance from any other vertex is minimized.

Solution:
Diameter: Use depth-first search starting from an arbitrary vertex, say 0, and find the endpoint of a longest path. 
Call the endpoint vertex start. Use another depth-first search from start. Find a longest path starting from start. 
This path is a longest simple path in the graph.

Center: Return the middle point of a longest simple path in the graph.

(See Graph.h)

	
3. Euler cycle. An Euler cycle in a graph is a cycle (not necessarily simple) that uses every edge in the graph exactly one.

(a) Show that a connected graph has an Euler cycle if and only if every vertex has even degree.

(b) Design a linear-time algorithm to determine whether a graph has an Euler cycle, and if so, find one.	

Solution:
We prove the equivalence in (a) by showing both implications (see Steps 1) and 2) below).

1) Assume a connected graph has an Euler cycle.

Fix a node in the cycle. Given an edge entering the node, there is an exiting edge from that node. Each pair (entering, exiting) edge from the node cannot have any coordinate in common with another (entering, exiting) edge because each edge is traversed exactly once in an Euler cycle. Thus the degree of every vertex is even.

2) Assume that the degree of every vertex in a connected graph G is even.

We will prove that the graph has an Euler cycle by induction on the number of edges in the graph. 
Let V be the number of vertices in the graph.

Base case: The number of edges in the graph is V - 1, the graph is connected and each edge has even degree. 
Clearly, the graph contains an Euler cycle.

The induction hypothesis: Assume that any subgraph of G, with the same vertices as G but fewer edges, and such that every vertex has even degree, has an Euler cycle. Then G has an Euler cycle.

We prove the induction hypothesis for the graph G by construction. Start from an arbitrary vertex v of the graph G. Do a depth-first search starting from the vertex v, but stop at the first moment that we need to pop a node from the stack. Let u be the node to be popped. Because u has even degree, it will have an edge that connects it with a vertex w on the path that we took from v to u. Take the path from w to u together with the edge from w to u, and eliminate its edges from the graph. The subgraph we obtain has fewer edges that the given graph and each vertex still has even degree (because for each node, we eliminate 0 or 2 edges). Apply the induction hypothesis to the subgraph. 

(See Graph.h)
